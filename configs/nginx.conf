worker_processes auto;
pid /var/run/nginx.pid;

# Required environment variables
env ADMIN_SERVICE_URL;
env BAN_DURATION_SECONDS;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;

    # Buffer Settings
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;

    # MIME Types
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Enhanced Logging Settings with Milliseconds
    map $msec $millisec {
        "~^(?<sec>\d+)\.(?<ms>\d+)$" $ms;
    }

    map $time_iso8601 $timestamp {
        "~^(?<dt>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\+(?<tz>\d{2}:\d{2})$" "$dt.$millisec+$tz";
    }

    log_format main_ext escape=json '[$timestamp] $remote_addr - $remote_user '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'forwarded_for="$http_x_forwarded_for" '
                       'req_time=$request_time '
                       'upstream_time="$upstream_response_time" '
                       'upstream_status="$upstream_status" '
                       'host="$host" '
                       'server_port="$server_port" '
                       'request_id="$request_id"';

    log_format security escape=json '[$timestamp] $remote_addr '
                       'client="$http_user_agent" '
                       'forwarded_for="$http_x_forwarded_for" '
                       'request="$request" '
                       'status=$status '
                       'violation_type="$violation_type" '
                       'details="$details" '
                       'request_id="$request_id"';

    # Main access log
    access_log /var/log/nginx/access.log main_ext buffer=4k flush=1s;
    
    # Security-related events only
    access_log /var/log/nginx/security.log security if=$loggable buffer=4k flush=1s;
    
    # Detailed error log with milliseconds
    error_log /var/log/nginx/error.log debug;

    # Lua Settings
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    # Rate Limiting with IP Ban
    lua_shared_dict ip_blacklist 10m;
    lua_shared_dict rate_limit_count 10m;

    init_worker_by_lua_block {
        ngx.timer.every(1, function()
            local blacklist = ngx.shared.ip_blacklist
            local keys = blacklist:get_keys()
            local current_time = ngx.time()
            
            for _, ip in ipairs(keys) do
                if ip ~= "ban_duration" then
                    local ban_until = blacklist:get(ip)
                    if ban_until and current_time >= ban_until then
                        blacklist:delete(ip)
                        ngx.log(ngx.WARN, string.format(
                            "[%s] Security Event [BAN_EXPIRED] - IP: %s, Ban expired at %s",
                            get_iso8601_timestamp(),
                            ip,
                            os.date("%Y-%m-%d %H:%M:%S", current_time)
                        ))
                        
                        -- Clear the banned_ips.conf file
                        local f = io.open("/etc/nginx/banned_ips.conf", "w")
                        if f then
                            f:write("# Banned IPs Configuration\n")
                            f:write("# Format: deny IP_ADDRESS;\n\n")
                            f:write("# Auto-generated - DO NOT EDIT\n")
                            f:write(string.format("# Last Ban Expired: %s\n", os.date("%Y-%m-%d %H:%M:%S", current_time)))
                            f:write("geo $banned_ip {\n")
                            f:write("    default 0;\n")
                            f:write("}\n\n")
                            f:write("map $banned_ip $banned_response {\n")
                            f:write("    0 '';\n")
                            f:write('    1 \'{"error": "IP temporarily banned due to excessive requests. Try again later."}\';\n')
                            f:write("}\n")
                            f:close()
                            -- Force nginx to reload the configuration
                            os.execute("nginx -s reload")
                        end
                    end
                end
            end
        end)
    }

    init_by_lua_block {
        -- Function to get ISO8601 timestamp with milliseconds
        function get_iso8601_timestamp()
            local now = ngx.now()
            local ms = string.format("%03d", math.floor((now - math.floor(now)) * 1000))
            return os.date("!%Y-%m-%dT%H:%M:%S.", math.floor(now)) .. ms .. "+00:00"
        end

        -- Get ban duration from environment variable
        local ban_duration = tonumber(os.getenv("BAN_DURATION_SECONDS"))
        if not ban_duration or ban_duration <= 0 then
            ngx.log(ngx.WARN, string.format("[%s] Invalid or missing BAN_DURATION_SECONDS, using default of 1800 seconds", get_iso8601_timestamp()))
            ban_duration = 1800
        end
        ngx.log(ngx.INFO, string.format("[%s] Using ban duration of %d seconds", get_iso8601_timestamp(), ban_duration))
        
        -- Store ban duration in shared memory for access in other contexts
        local ip_blacklist = ngx.shared.ip_blacklist
        ip_blacklist:set("ban_duration", ban_duration)
        
        -- Function to ban an IP
        function ban_ip(ip)
            local blacklist = ngx.shared.ip_blacklist
            local ban_duration = blacklist:get("ban_duration")
            local ban_until = ngx.time() + ban_duration
            
            -- Store the ban information
            local success, err, forcible = blacklist:set(ip, ban_until)
            if not success then
                ngx.log(ngx.ERR, string.format("[%s] Failed to ban IP %s: %s", 
                    get_iso8601_timestamp(),
                    ip, 
                    err or "unknown error"
                ))
                return
            end
            
            -- Log detailed ban information
            ngx.log(ngx.WARN, string.format(
                "[%s] Security Event [IP_BANNED] - IP: %s, Ban Start: %s, Ban Until: %s (duration: %d seconds)",
                get_iso8601_timestamp(),
                ip,
                os.date("%Y-%m-%d %H:%M:%S", ngx.time()),
                os.date("%Y-%m-%d %H:%M:%S", ban_until),
                ban_duration
            ))
            
            -- Create or update banned_ips.conf
            local f = io.open("/etc/nginx/banned_ips.conf", "w")
            if f then
                f:write("# Banned IPs Configuration\n")
                f:write("# Format: deny IP_ADDRESS;\n\n")
                f:write("# Auto-generated - DO NOT EDIT\n")
                f:write(string.format("# Ban Start: %s\n", os.date("%Y-%m-%d %H:%M:%S", ngx.time())))
                f:write(string.format("# Ban Until: %s\n", os.date("%Y-%m-%d %H:%M:%S", ban_until)))
                f:write("geo $banned_ip {\n")
                f:write("    default 0;\n")
                f:write("    " .. ip .. " 1;\n")
                f:write("}\n\n")
                f:write("map $banned_ip $banned_response {\n")
                f:write("    0 '';\n")
                if ban_duration < 60 then
                    f:write(string.format('    1 \'{"error": "IP temporarily banned due to excessive requests. Try again in %d seconds."}\';\n', ban_duration))
                else
                    f:write(string.format('    1 \'{"error": "IP temporarily banned due to excessive requests. Try again in %d minutes."}\';\n', math.ceil(ban_duration/60)))
                end
                f:write("}\n")
                f:close()
                -- Force nginx to reload the configuration
                os.execute("nginx -s reload")
            else
                ngx.log(ngx.ERR, string.format("[%s] Failed to open banned_ips.conf for writing", get_iso8601_timestamp()))
            end
        end
        
        -- Function to check if IP is banned
        function is_ip_banned(ip)
            local blacklist = ngx.shared.ip_blacklist
            local ban_until = blacklist:get(ip)
            
            if ban_until then
                local current_time = ngx.time()
                local remaining_time = ban_until - current_time
                
                ngx.log(ngx.INFO, string.format(
                    "[%s] Ban check for IP %s - Current Time: %s, Ban Until: %s, Remaining: %d seconds",
                    get_iso8601_timestamp(),
                    ip,
                    os.date("%Y-%m-%d %H:%M:%S", current_time),
                    os.date("%Y-%m-%d %H:%M:%S", ban_until),
                    remaining_time
                ))
                
                if current_time < ban_until then
                    ngx.log(ngx.WARN, string.format(
                        "[%s] Security Event [BANNED_REQUEST_BLOCKED] - IP: %s, Ban expires in %d seconds",
                        get_iso8601_timestamp(),
                        ip,
                        remaining_time
                    ))
                    return true
                end
            end
            return false
        end

        -- Function to check rate limit count and ban if needed
        function check_rate_limit(ip)
            local count = ngx.shared.rate_limit_count:get(ip) or 0
            if count >= 3 then  -- Ban after 3 rate limit violations
                ban_ip(ip)
                ngx.shared.rate_limit_count:delete(ip)
                return true
            else
                ngx.shared.rate_limit_count:incr(ip, 1, 0, 60)  -- Increment count, expire in 60 seconds
                ngx.log(ngx.WARN, string.format(
                    "[%s] Security Event [RATE_LIMIT_WARNING] - IP: %s, Details: Violation count: %d/3",
                    get_iso8601_timestamp(),
                    ip,
                    count + 1
                ))
                return false
            end
        end
    }

    # Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=10r/s;
    limit_req_status 429;

    map $status $loggable {
        ~^[45] 1;
        default 0;
    }

    server {
        listen 80;
        server_name localhost;

        # Declare variables
        set $backend "";
        set $violation_type "";
        set $details "";

        # Enable access logging for this server block
        access_log /var/log/nginx/access.log main_ext buffer=4k flush=1s;
        access_log /var/log/nginx/security.log security if=$loggable buffer=4k flush=1s;
        error_log /var/log/nginx/error.log debug;

        # Check for banned IPs in rewrite phase (runs before rate limiting)
        rewrite_by_lua_block {
            local ip = ngx.var.remote_addr
            if is_ip_banned(ip) then
                ngx.var.violation_type = "BANNED_IP"
                ngx.var.details = "Request from banned IP"
                ngx.status = 403
                ngx.header.content_type = "application/json"
                ngx.say('{"error": "IP temporarily banned due to excessive requests. Try again later."}')
                return ngx.exit(403)
            end
        }

        # Admin Service
        location /admin/ {
            access_log /var/log/nginx/access.log main_ext buffer=4k flush=1s;
            access_log /var/log/nginx/security.log security if=$loggable buffer=4k flush=1s;
            
            # Rate limiting with burst
            limit_req zone=admin_limit burst=5 nodelay;

            # Handle rate limit exceeded
            error_page 429 = @rate_limited;

            # Set the backend URL from environment variable
            access_by_lua_block {
                local backend = os.getenv("ADMIN_SERVICE_URL")
                if not backend or backend == "" then
                    ngx.status = 500
                    ngx.header.content_type = "application/json"
                    ngx.say('{"error": "ADMIN_SERVICE_URL environment variable is not set"}')
                    return ngx.exit(500)
                end
                ngx.var.backend = backend
            }

            # Remove /admin/ prefix and add /api/
            rewrite ^/admin/(.*) /api/$1 break;

            # Proxy settings
            proxy_pass $backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Security headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Security
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                set $violation_type "INVALID_METHOD";
                set $details "Method not allowed: $request_method";
                return 444;
            }
        }

        # Rate limit handler
        location @rate_limited {
            access_log /var/log/nginx/security.log security buffer=4k flush=1s;
            
            content_by_lua_block {
                local ip = ngx.var.remote_addr
                if check_rate_limit(ip) then
                    ngx.status = 403
                    ngx.header.content_type = "application/json"
                    ngx.var.violation_type = "IP_BANNED"
                    ngx.var.details = "IP banned due to excessive rate limit violations"
                    ngx.say('{"error": "IP banned due to excessive rate limit violations"}')
                else
                    ngx.status = 429
                    ngx.header.content_type = "application/json"
                    ngx.var.violation_type = "RATE_LIMIT_EXCEEDED"
                    ngx.var.details = "Rate limit exceeded"
                    ngx.say('{"error": "Rate limit exceeded. Further violations will result in a temporary ban."}')
                end
                return ngx.exit(ngx.status)
            }
        }

        # Health Check
        location /health {
            access_log /var/log/nginx/access.log main_ext buffer=4k flush=1s;
            return 200 'healthy\n';
        }

        # Deny access to . files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Return 444 for undefined routes
        location / {
            set $violation_type "UNDEFINED_ROUTE";
            set $details "Attempted to access undefined route: $request_uri";
            return 444;
        }
    }
} 