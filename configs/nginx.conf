worker_processes auto;
pid /var/run/nginx.pid;

# Required environment variables
env ADMIN_SERVICE_URL;
env RATE_LIMIT_REQUESTS;
env BAN_DURATION_SECONDS;
env MAX_BODY_SIZE;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 10M;
    client_body_timeout 12;
    client_header_timeout 12;

    # Buffer Settings
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;

    # MIME Types
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    log_format main '[$time_iso8601] $remote_addr - "$request" '
                    'status=$status bytes=$body_bytes_sent '
                    'referer="$http_referer" '
                    'user_agent="$http_user_agent" '
                    'forwarded_for="$http_x_forwarded_for" '
                    'req_time=$request_time';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log notice;

    # Lua Settings
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    # Rate Limiting with IP Ban
    lua_shared_dict ip_blacklist 10m;

    init_by_lua_block {
        -- Ban duration in seconds (from environment)
        local ban_duration = tonumber(os.getenv("BAN_DURATION_SECONDS")) or 1800
        
        -- Function to ban an IP
        function ban_ip(ip)
            local blacklist = ngx.shared.ip_blacklist
            local ban_until = ngx.time() + ban_duration
            blacklist:set(ip, ban_until)
            ngx.log(ngx.NOTICE, "IP " .. ip .. " banned until " .. os.date("%Y-%m-%d %H:%M:%S", ban_until))
        end
        
        -- Function to check if IP is banned
        function is_ip_banned(ip)
            local blacklist = ngx.shared.ip_blacklist
            local ban_until = blacklist:get(ip)
            if ban_until then
                if ban_until > ngx.time() then
                    ngx.log(ngx.INFO, "Blocked request from banned IP: " .. ip)
                    return true
                else
                    blacklist:delete(ip)
                    ngx.log(ngx.NOTICE, "Ban expired for IP: " .. ip)
                end
            end
            return false
        end
    }

    # Rate Limiting Zones
    limit_req_zone $binary_remote_addr zone=admin_limit:10m rate=10r/s;
    limit_req_status 429;

    server {
        listen 80;
        server_name localhost;

        # Enable Docker's DNS resolver
        resolver 127.0.0.11 ipv6=off;

        # Declare variables
        set $backend "";

        # Enable access logging for this server block
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log notice;

        # Check for banned IPs
        access_by_lua_block {
            local ip = ngx.var.remote_addr
            if is_ip_banned(ip) then
                ngx.status = 403
                ngx.header.content_type = "application/json"
                ngx.say('{"error": "IP temporarily banned due to excessive requests. Try again in 30 minutes."}')
                return ngx.exit(403)
            end
        }

        # Admin Service
        location /admin/ {
            access_log /var/log/nginx/access.log main;
            
            # Rate limiting with burst
            limit_req zone=admin_limit burst=5 nodelay;

            # Handle rate limit exceeded
            error_page 429 = @ban_ip;

            # Set the backend URL from environment variable
            access_by_lua_block {
                local backend = os.getenv("ADMIN_SERVICE_URL")
                if not backend or backend == "" then
                    ngx.status = 500
                    ngx.header.content_type = "application/json"
                    ngx.say('{"error": "ADMIN_SERVICE_URL environment variable is not set"}')
                    return ngx.exit(500)
                end
                ngx.var.backend = backend
            }

            # Remove /admin/ prefix and add /api/
            rewrite ^/admin/(.*) /api/$1 break;

            # Proxy settings
            proxy_pass $backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Security headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Security
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                return 444;
            }
        }

        # Ban IP handler
        location @ban_ip {
            access_log /var/log/nginx/banned.log main;
            
            content_by_lua_block {
                local ip = ngx.var.remote_addr
                ban_ip(ip)
                ngx.status = 429
                ngx.header.content_type = "application/json"
                ngx.say('{"error": "Rate limit exceeded. IP banned for 30 minutes."}')
                return ngx.exit(429)
            }
        }

        # Health Check
        location /health {
            access_log /var/log/nginx/access.log main;
            return 200 'healthy\n';
        }

        # Debug endpoint
        location /debug {
            content_by_lua_block {
                ngx.header.content_type = "application/json"
                local backend = os.getenv("ADMIN_SERVICE_URL")
                if not backend or backend == "" then
                    ngx.say('{"error": "ADMIN_SERVICE_URL environment variable is not set"}')
                else
                    ngx.say('{"backend_url": "' .. backend .. '"}')
                end
            }
        }

        # Deny access to . files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Return 444 for undefined routes
        location / {
            return 444;
        }
    }
} 