# Dynamic worker processes based on CPU cores
worker_processes auto;
pid /var/run/nginx.pid;

# Required environment variables
env ADMIN_SERVICE_URL;
env BAN_DURATION_SECONDS;
env WORKER_CONNECTIONS;
env RATE_LIMIT_REQUESTS;
env RATE_LIMIT_BURST;
env RATE_LIMIT_WINDOW;
env MAX_RATE_LIMIT_VIOLATIONS;
env LOG_LEVEL;
env LOG_BUFFER_SIZE;
env LOG_FLUSH_INTERVAL;
env CLIENT_MAX_BODY_SIZE;
env CLIENT_BODY_TIMEOUT;
env CLIENT_HEADER_TIMEOUT;
env CLIENT_BODY_BUFFER_SIZE;
env CLIENT_HEADER_BUFFER_SIZE;
env LARGE_CLIENT_HEADER_BUFFERS_NUMBER;
env LARGE_CLIENT_HEADER_BUFFERS_SIZE;
env RATE_LIMIT_MEMORY;
env IP_BLACKLIST_MEMORY;
env RATE_LIMIT_COUNT_MEMORY;
env PROXY_CONNECT_TIMEOUT;
env PROXY_SEND_TIMEOUT;
env PROXY_READ_TIMEOUT;

# Event settings
events {
    worker_connections 1024;
    multi_accept on;
}

# HTTP server configuration
http {
    # Include modular configuration files
    include /etc/nginx/conf.d/basic.conf;
    include /etc/nginx/conf.d/security.conf;
    include /etc/nginx/conf.d/logging.conf;
    include /etc/nginx/conf.d/lua.conf;
    include /etc/nginx/conf.d/upstreams.conf;

    # Server block
    server {
        listen 80;
        server_name localhost;

        # Declare variables
        set $backend "";
        set $violation_type "";
        set $details "";

        # Check for banned IPs in rewrite phase (runs before rate limiting)
        rewrite_by_lua_block {
            local ip = ngx.var.remote_addr
            if ip_ban.is_ip_banned(ip) then
                ngx.var.violation_type = "BANNED_IP"
                ngx.var.details = "Request from banned IP"
                ngx.status = 403
                ngx.header.content_type = "application/json"
                ngx.say('{"error": "IP temporarily banned due to excessive requests. Try again later."}')
                return ngx.exit(403)
            end
        }

        # Admin Service
        location /admin/ {
            # Rate limiting with burst
            limit_req zone=admin_limit burst=5 nodelay;

            # Handle rate limit exceeded
            error_page 429 = @rate_limited;

            # Set the backend URL from environment variable
            access_by_lua_block {
                local backend = os.getenv("ADMIN_SERVICE_URL")
                if not backend or backend == "" then
                    ngx.status = 500
                    ngx.header.content_type = "application/json"
                    ngx.say('{"error": "ADMIN_SERVICE_URL environment variable is not set"}')
                    return ngx.exit(500)
                end
                ngx.var.backend = backend
            }

            # Remove /admin/ prefix and add /api/
            rewrite ^/admin/(.*) /api/$1 break;

            # Proxy to backend
            proxy_pass $backend;

            # Security
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                set $violation_type "INVALID_METHOD";
                set $details "Method not allowed: $request_method";
                return 444;
            }
        }

        # Rate limit handler
        location @rate_limited {
            access_log /var/log/nginx/security.log security buffer=4k flush=1s;
            
            content_by_lua_block {
                local ip = ngx.var.remote_addr
                if ip_ban.check_rate_limit(ip) then
                    ngx.status = 403
                    ngx.header.content_type = "application/json"
                    ngx.var.violation_type = "IP_BANNED"
                    ngx.var.details = "IP banned due to excessive rate limit violations"
                    ngx.say('{"error": "IP banned due to excessive rate limit violations"}')
                else
                    ngx.status = 429
                    ngx.header.content_type = "application/json"
                    ngx.var.violation_type = "RATE_LIMIT_EXCEEDED"
                    ngx.var.details = "Rate limit exceeded"
                    ngx.say('{"error": "Rate limit exceeded. Further violations will result in a temporary ban."}')
                end
                return ngx.exit(ngx.status)
            }
        }

        # Health Check
        location /health {
            return 200 'healthy\n';
        }

        # Deny access to . files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Return 444 for undefined routes
        location / {
            set $violation_type "UNDEFINED_ROUTE";
            set $details "Attempted to access undefined route: $request_uri";
            return 444;
        }
    }
} 