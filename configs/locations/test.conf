# =============================================================================
# Integration Test Endpoints
# =============================================================================

location ~ ^/tests/(.+) {
    default_type 'text/plain';
    access_by_lua_block {
        -- Capture the test path
        local test_path = ngx.var[1]
        ngx.log(ngx.DEBUG, "Running test: ", test_path)
        
        -- Load the test module
        local test_module = require("tests." .. test_path)
        local test_utils = require "tests.core.test_utils"
        
        -- Set initial status before any output
        -- ngx.status = 200
        
        -- Run the test suite
        test_utils.run_suite(test_path, test_module.tests)
        
        -- Run cleanup if available
        if test_module.after_all then
            ngx.log(ngx.DEBUG, "Running after_all cleanup for: ", test_path)
            local ok, err = pcall(test_module.after_all)
            if not ok then
                ngx.log(ngx.ERR, "Cleanup failed: ", err)
            end
        end
    }
}

location = /tests/all {
    default_type 'text/plain';
    
    # Maximize buffer settings
    proxy_buffering off;
    proxy_buffer_size 512k;
    proxy_buffers 16 512k;
    proxy_busy_buffers_size 1m;
    client_body_buffer_size 1m;
    client_max_body_size 100m;
    
    access_by_lua_block {
        local lfs = require "lfs"
        local test_utils = require "tests.core.test_utils"
        
        -- Function to recursively find test files
        local function find_test_files(path, results)
            results = results or {}
            for file in lfs.dir(path) do
                if file ~= "." and file ~= ".." then
                    local full_path = path .. "/" .. file
                    local attr = lfs.attributes(full_path)
                    if attr.mode == "directory" then
                        find_test_files(full_path, results)
                    elseif file:match("%.lua$") then
                        -- Convert file path to module path
                        local module_path = full_path:match("tests/modules/(.+)%.lua$")
                        if module_path then
                            table.insert(results, module_path)
                        end
                    end
                end
            end
            return results
        end

        -- Find and run all tests
        local test_files = find_test_files(ngx.config.prefix() .. "tests/modules")
        local failed_tests = {}
        
        for _, test_path in ipairs(test_files) do
            ngx.log(ngx.INFO, "Running test module: ", test_path)
            
            local ok, test_module = pcall(require, "tests.modules." .. test_path)
            if ok and test_module.tests then
                test_utils.run_suite(test_path, test_module.tests)
                
                -- Run cleanup if available
                if test_module.after_all then
                    local cleanup_ok, err = pcall(test_module.after_all)
                    if not cleanup_ok then
                        ngx.log(ngx.ERR, "Cleanup failed for ", test_path, ": ", err)
                        table.insert(failed_tests, test_path)
                    end
                end
            else
                ngx.log(ngx.ERR, "Failed to load test module: ", test_path)
                table.insert(failed_tests, test_path)
            end
        end
        
        if #failed_tests > 0 then
            ngx.log(ngx.ERR, "Some tests failed: ", table.concat(failed_tests, ", "))
            ngx.status = 500
        end
    }
}

