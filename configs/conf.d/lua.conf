# Lua Settings
lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/nginx/lua/?.lua;;";
lua_code_cache on;

# Load Lua modules
init_by_lua_block {
    -- Load utility functions
    utils = require "utils"
    config = require "config"
    ip_ban = require "ip_ban"
    
    -- Initialize configuration
    config.load_config()
}

# Worker initialization
init_worker_by_lua_block {
    -- Start the IP ban expiry checker
    ngx.timer.every(1, function()
        local blacklist = ngx.shared.ip_blacklist
        local keys = blacklist:get_keys()
        local current_time = ngx.time()
        
        for _, ip in ipairs(keys) do
            if ip ~= "ban_duration" then
                local ban_until = blacklist:get(ip)
                if ban_until and current_time >= ban_until then
                    blacklist:delete(ip)
                    ngx.log(ngx.WARN, string.format(
                        "[%s] Security Event [BAN_EXPIRED] - IP: %s, Ban expired at %s",
                        utils.get_iso8601_timestamp(),
                        ip,
                        os.date("%Y-%m-%d %H:%M:%S", current_time)
                    ))
                    
                    -- Clear the banned_ips.conf file
                    local f = io.open("/etc/nginx/banned_ips.conf", "w")
                    if f then
                        f:write("# Banned IPs Configuration\n")
                        f:write("# Format: deny IP_ADDRESS;\n\n")
                        f:write("# Auto-generated - DO NOT EDIT\n")
                        f:write(string.format("# Last Ban Expired: %s\n", os.date("%Y-%m-%d %H:%M:%S", current_time)))
                        f:write("geo $banned_ip {\n")
                        f:write("    default 0;\n")
                        f:write("}\n\n")
                        f:write("map $banned_ip $banned_response {\n")
                        f:write("    0 '';\n")
                        f:write('    1 \'{"error": "IP temporarily banned due to excessive requests. Try again later."}\';\n')
                        f:write("}\n")
                        f:close()
                        -- Force nginx to reload the configuration
                        os.execute("nginx -s reload")
                    end
                end
            end
        end
    end)
} 